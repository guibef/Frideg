<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/frideg/feed.xml" rel="self" type="application/atom+xml" /><link href="/frideg/" rel="alternate" type="text/html" /><updated>2024-11-25T11:28:20+00:00</updated><id>/frideg/feed.xml</id><title type="html">FriDeg</title><subtitle>FriDeg, not fridge, pronounced as Fried Egg, comes from the first three letters of Friday and Degree,  is a place where I write my blogs.  It can be tech-related topics or just some random thoughts.</subtitle><author><name>Guibin</name></author><entry><title type="html">Terraform Basics</title><link href="/frideg/basics/2023/07/03/terraform.html" rel="alternate" type="text/html" title="Terraform Basics" /><published>2023-07-03T00:00:00+00:00</published><updated>2023-07-03T00:00:00+00:00</updated><id>/frideg/basics/2023/07/03/terraform</id><content type="html" xml:base="/frideg/basics/2023/07/03/terraform.html"><![CDATA[<h2 id="providers"><a href="https://developer.hashicorp.com/terraform/language/providers">Providers</a></h2>

<p>are for interacting with remote systems, like cloud providers, and call APIs. <code class="language-plaintext highlighter-rouge">terraform init</code> will install providers.</p>

<h3 id="provider-config">Provider Config</h3>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
  <span class="nx">access_key</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">aws_access_key</span>
  <span class="nx">secret_key</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">aws_secret_key</span>
  <span class="nx">region</span> <span class="p">=</span> <span class="s2">"us-east-1"</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="resources"><a href="https://developer.hashicorp.com/terraform/language/resources">Resources</a></h2>

<p>describe infrastructure objects and are implemented by a provider.</p>

<ul>
  <li>resource type: “aws_instance”</li>
  <li>resource name: “server”</li>
  <li>resource argument: “ami”, “instance_type”, “tags”</li>
  <li>Meta_Argument: “count”</li>
</ul>

<p>Use the <code class="language-plaintext highlighter-rouge">&lt;RESOURCE TYPE&gt;.&lt;NAME&gt;.&lt;ATTRIBUTE&gt;</code> to access attributes.</p>

<h3 id="provisioners">Provisioners</h3>

<p>are used to run some commands when the resource is created/destroyed.  Generally not recommnended by Terraform.</p>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"server"</span> <span class="p">{</span>
  <span class="nx">count</span> <span class="p">=</span> <span class="mi">4</span> <span class="c1"># create four similar EC2 instances</span>

  <span class="nx">ami</span>           <span class="p">=</span> <span class="s2">"ami-a1b2c3d4"</span>
  <span class="nx">instance_type</span> <span class="p">=</span> <span class="s2">"t2.micro"</span>

  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"Server </span><span class="k">${</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="k">}</span><span class="s2">"</span>
  <span class="p">}</span>

  <span class="k">provisioner</span> <span class="s2">"local-exec"</span> <span class="p">{</span>
    <span class="nx">command</span> <span class="p">=</span> <span class="s2">"echo The server's IP address is </span><span class="k">${</span><span class="nx">self</span><span class="p">.</span><span class="nx">private_ip</span><span class="k">}</span><span class="s2">"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="meta-arguemnts">Meta-Arguemnts</h3>
<ul>
  <li>depends_on</li>
  <li>count</li>
  <li>for_each</li>
  <li>provider</li>
  <li>lifecycle</li>
  <li>provisioner</li>
</ul>

<h2 id="data-sources"><a href="https://developer.hashicorp.com/terraform/language/data-sources">Data Sources</a></h2>

<p>are essentially read only resources.  Usually provided alongside with resource type for accessing info via <code class="language-plaintext highlighter-rouge">data.&lt;TYPE&gt;.&lt;NAME&gt;.&lt;ATTRIBUTE&gt;</code>.</p>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">data</span> <span class="s2">"aws_ami"</span> <span class="s2">"example"</span> <span class="p">{</span>
  <span class="nx">most_recent</span> <span class="p">=</span> <span class="kc">true</span>

  <span class="nx">owners</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"self"</span><span class="p">]</span>
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span>   <span class="p">=</span> <span class="s2">"app-server"</span>
    <span class="nx">Tested</span> <span class="p">=</span> <span class="s2">"true"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="meta-arguemnts-1">Meta-Arguemnts</h3>
<ul>
  <li>depends_on</li>
  <li>count</li>
  <li>for_each</li>
  <li>provider</li>
  <li>provisioner</li>
</ul>

<h2 id="variables-outputs-and-values"><a href="https://developer.hashicorp.com/terraform/language/values">Variables, Outputs and Values</a></h2>

<h3 id="input-variables">Input Variables</h3>

<p>serve as parameters for a Terraform module, like function arguments, and can be accessed via <code class="language-plaintext highlighter-rouge">var.&lt;NAME&gt;</code>.</p>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">variable</span> <span class="s2">"image_id"</span> <span class="p">{</span>
  <span class="nx">type</span> <span class="p">=</span> <span class="nx">string</span>
<span class="p">}</span>

<span class="k">variable</span> <span class="s2">"availability_zone_names"</span> <span class="p">{</span>
  <span class="nx">type</span>    <span class="p">=</span> <span class="nx">list</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"us-west-1a"</span><span class="p">]</span>
<span class="p">}</span>

<span class="k">variable</span> <span class="s2">"docker_ports"</span> <span class="p">{</span>
  <span class="nx">type</span> <span class="p">=</span> <span class="nx">list</span><span class="p">(</span><span class="nx">object</span><span class="p">({</span>
    <span class="nx">internal</span> <span class="p">=</span> <span class="nx">number</span>
    <span class="nx">external</span> <span class="p">=</span> <span class="nx">number</span>
    <span class="nx">protocol</span> <span class="p">=</span> <span class="nx">string</span>
  <span class="p">}))</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nx">internal</span> <span class="p">=</span> <span class="mi">8300</span>
      <span class="nx">external</span> <span class="p">=</span> <span class="mi">8300</span>
      <span class="nx">protocol</span> <span class="p">=</span> <span class="s2">"tcp"</span>
    <span class="p">}</span>
  <span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="optional-arguments">Optional arguments</h4>
<ul>
  <li>default</li>
  <li>type</li>
  <li>description</li>
  <li>validation</li>
  <li>sensitive</li>
  <li>nullable</li>
</ul>

<p>Varialbes in root modudule can be assigned with <code class="language-plaintext highlighter-rouge">.tfvars</code> file.  Also, terraform searches for environment variables named <code class="language-plaintext highlighter-rouge">TF_VAR_</code> followed by the name of a declared variable.</p>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">image_id</span> <span class="err">=</span> <span class="s2">"ami-abc123"</span>
<span class="nx">availability_zone_names</span> <span class="err">=</span> <span class="p">[</span>
  <span class="s2">"us-east-1a"</span><span class="p">,</span>
  <span class="s2">"us-west-1c"</span><span class="p">,</span>
<span class="p">]</span>
</code></pre></div></div>

<h3 id="output-values">Output Values</h3>

<p>are like return values for a Terraform module, like function return values.  In a parent module, outputs of child modules are available in expressions as <code class="language-plaintext highlighter-rouge">module.&lt;MODULE NAME&gt;.&lt;OUTPUT NAME&gt;</code>.</p>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">output</span> <span class="s2">"instance_ip_addr"</span> <span class="p">{</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">server</span><span class="p">.</span><span class="nx">private_ip</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="optional-arguments-1">Optional arguments</h4>
<ul>
  <li>description</li>
  <li>precondition</li>
  <li>sensitive</li>
  <li>depends_on</li>
</ul>

<h3 id="local-values">Local Values</h3>

<p>are a convenience feature for assigning a short name to an expression, like local variable.  A set of related local values can be declared together in a single locals block and can be referenced as <code class="language-plaintext highlighter-rouge">local.&lt;NAME&gt;</code>.</p>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">locals</span> <span class="p">{</span>
  <span class="nx">service_name</span> <span class="p">=</span> <span class="s2">"forum"</span>
  <span class="nx">owner</span>        <span class="p">=</span> <span class="s2">"Community Team"</span>
<span class="p">}</span>

<span class="nx">locals</span> <span class="p">{</span>
  <span class="c1"># Ids for multiple sets of EC2 instances, merged together</span>
  <span class="nx">instance_ids</span> <span class="p">=</span> <span class="nx">concat</span><span class="p">(</span><span class="nx">aws_instance</span><span class="p">.</span><span class="nx">blue</span><span class="p">.*.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">green</span><span class="p">.*.</span><span class="nx">id</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">locals</span> <span class="p">{</span>
  <span class="c1"># Common tags to be assigned to all resources</span>
  <span class="nx">common_tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Service</span> <span class="p">=</span> <span class="kd">local</span><span class="p">.</span><span class="nx">service_name</span>
    <span class="nx">Owner</span>   <span class="p">=</span> <span class="kd">local</span><span class="p">.</span><span class="nx">owner</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="modules"><a href="https://developer.hashicorp.com/terraform/language/modules">Modules</a></h2>

<p>Modules are containers for multiple resources that are used together. A module consists of a collection of <code class="language-plaintext highlighter-rouge">.tf</code> and/or <code class="language-plaintext highlighter-rouge">.tf.json</code> files kept together in a directory.</p>

<p>Calling a child module with specific values for its input variables.</p>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="s2">"consul"</span> <span class="p">{</span>
  <span class="nx">source</span>  <span class="p">=</span> <span class="s2">"hashicorp/consul/aws"</span>
  <span class="nx">version</span> <span class="p">=</span> <span class="s2">"0.0.5"</span>

  <span class="nx">servers</span> <span class="p">=</span> <span class="mi">3</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Accessing module output values via <code class="language-plaintext highlighter-rouge">module.&lt;NAME&gt;.&lt;OUTPUT NAME&gt;</code>.</p>

<h3 id="meta-arguments">Meta-Arguments</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">source</code> argument is mandatory for all modules.</li>
  <li><code class="language-plaintext highlighter-rouge">version</code> argument is recommended for modules from a registry.</li>
  <li>count</li>
  <li>for_each</li>
  <li>providers</li>
  <li>depends_on</li>
</ul>

<h3 id="module-sources">Module Sources</h3>

<p>The <code class="language-plaintext highlighter-rouge">source</code> argument in a module block tells Terraform where to find the source code for the desired child module.</p>

<h4 id="local-paths">Local Paths</h4>

<p>A local path must begin with either <code class="language-plaintext highlighter-rouge">./</code> or <code class="language-plaintext highlighter-rouge">../</code> to indicate that a local path is intended</p>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="s2">"consul"</span> <span class="p">{</span>
  <span class="nx">source</span> <span class="p">=</span> <span class="s2">"./consul"</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="terraform-registry">Terraform Registry</h4>

<p>Modules on the public Terraform Registry can be referenced using a registry source address of the form <code class="language-plaintext highlighter-rouge">&lt;NAMESPACE&gt;/&lt;NAME&gt;/&lt;PROVIDER&gt;</code>.</p>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="s2">"consul"</span> <span class="p">{</span>
  <span class="nx">source</span> <span class="p">=</span> <span class="s2">"hashicorp/consul/aws"</span>
  <span class="nx">version</span> <span class="p">=</span> <span class="s2">"0.1.0"</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="github">GitHub</h4>

<p>Terraform will recognize unprefixed <code class="language-plaintext highlighter-rouge">github.com</code> URLs and interpret them automatically as Git repository sources.</p>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="s2">"consul"</span> <span class="p">{</span>
  <span class="nx">source</span> <span class="p">=</span> <span class="s2">"github.com/hashicorp/example"</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="s2">"consul"</span> <span class="p">{</span>
  <span class="nx">source</span> <span class="p">=</span> <span class="s2">"hashicorp/consul/aws"</span>
  <span class="nx">version</span> <span class="p">=</span> <span class="s2">"0.1.0"</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="other-topics">Other Topics</h2>

<ul>
  <li><a href="https://developer.hashicorp.com/terraform/language/files">Files and Directories</a></li>
  <li><a href="https://developer.hashicorp.com/terraform/language/expressions">Expressions</a></li>
  <li><a href="https://developer.hashicorp.com/terraform/language/functions">Functions</a></li>
  <li><a href="https://developer.hashicorp.com/terraform/language/state">State</a></li>
  <li><a href="https://developer.hashicorp.com/terraform/language/import">Import</a></li>
</ul>]]></content><author><name>Guibin</name></author><category term="Basics" /><category term="Terraform" /><category term="Cloud" /><summary type="html"><![CDATA[Providers]]></summary></entry><entry><title type="html">Shell Scripting</title><link href="/frideg/basics/2022/11/20/shell-script.html" rel="alternate" type="text/html" title="Shell Scripting" /><published>2022-11-20T00:00:00+00:00</published><updated>2022-11-20T00:00:00+00:00</updated><id>/frideg/basics/2022/11/20/shell-script</id><content type="html" xml:base="/frideg/basics/2022/11/20/shell-script.html"><![CDATA[<h2 id="create-a-bash-script">Create a Bash Script</h2>

<h3 id="create-a-file-named-examplesh">Create a file named <code class="language-plaintext highlighter-rouge">example.sh</code></h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>touch example.sh
</code></pre></div></div>
<p>By convention, bash script has a <code class="language-plaintext highlighter-rouge">.sh</code> file extension, but it works without it.</p>

<h3 id="add-shebang">Add shebang</h3>

<p>Shell script starts with shebang <code class="language-plaintext highlighter-rouge">#!</code> following by the bash shell path.</p>

<p>For example, use <code class="language-plaintext highlighter-rouge">which bash</code> to find the path of bash shell, add <code class="language-plaintext highlighter-rouge">#! /usr/bin/bash</code> to <code class="language-plaintext highlighter-rouge">example.sh</code> and then add commands etc.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#! /usr/bin/bash </span>
<span class="nb">echo</span> <span class="s2">"Hello World!"</span>
</code></pre></div></div>

<h3 id="make-the-script-executable">Make the script executable</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chmod +x example.sh
</code></pre></div></div>

<h3 id="run-the-script">Run the script</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$./hello.sh       
Hello World!
</code></pre></div></div>
<h2 id="basic-syntax-of-bash-scripting">Basic Syntax of Bash Scripting</h2>

<h3 id="variables">Variables</h3>

<p>Define a variable with <code class="language-plaintext highlighter-rouge">foo=bar</code> and reference a variable with <code class="language-plaintext highlighter-rouge">$foo</code>.</p>

<h3 id="numerical-expressions">Numerical expressions</h3>

<p><code class="language-plaintext highlighter-rouge">$((expression))</code>, for example <code class="language-plaintext highlighter-rouge">var=$((1+2))</code>.</p>

<table>
  <thead>
    <tr>
      <th>Operator</th>
      <th>Usage</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">+</code></td>
      <td>addition</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-</code></td>
      <td>subtraction</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">*</code></td>
      <td>multiplication</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">/</code></td>
      <td>division</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">**</code></td>
      <td>exponentiation</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%</code></td>
      <td>modulus</td>
    </tr>
  </tbody>
</table>

<h3 id="numerical-comparison">Numerical comparison</h3>

<table>
  <thead>
    <tr>
      <th>Operation</th>
      <th>Syntax</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">a == b</code></td>
      <td><code class="language-plaintext highlighter-rouge">a -eq b</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">a &gt;= b</code></td>
      <td><code class="language-plaintext highlighter-rouge">a -ge b</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">a &gt; b</code></td>
      <td><code class="language-plaintext highlighter-rouge">a -gt b</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">a &lt;= b</code></td>
      <td><code class="language-plaintext highlighter-rouge">a -le b</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">a &lt; b</code></td>
      <td><code class="language-plaintext highlighter-rouge">a -lt b</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">a != b</code></td>
      <td><code class="language-plaintext highlighter-rouge">a -ne b</code></td>
    </tr>
  </tbody>
</table>

<h3 id="conditional-statements">Conditional statements</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">if ... then ... fi</code></li>
  <li><code class="language-plaintext highlighter-rouge">if ... then ... else ... fi</code></li>
  <li><code class="language-plaintext highlighter-rouge">if ... then ... elif ... then ... else ... fi</code></li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">[[</span>condition]]
<span class="k">then
    </span>statement
<span class="k">elif</span> <span class="o">[[</span>condition]]
<span class="k">then
    </span>statement
<span class="k">else
    </span>statement
<span class="k">fi</span>
</code></pre></div></div>

<h3 id="looping">Looping</h3>

<h4 id="for-loop">for loop</h4>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>i <span class="k">in</span> <span class="o">{</span>1..5<span class="o">}</span>
<span class="k">do
    </span><span class="nb">echo</span> <span class="nv">$i</span>
<span class="k">done

for </span>color <span class="k">in </span>red yellow green
<span class="k">do
    </span><span class="nb">echo</span> <span class="nv">$color</span>
<span class="k">done</span>
</code></pre></div></div>

<h4 id="while-loop">while loop</h4>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">i</span><span class="o">=</span>0
<span class="k">while</span> <span class="o">[[</span> <span class="nv">$i</span> <span class="nt">-le</span> 10]]
<span class="k">do
    </span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$i</span><span class="s2">"</span>
    <span class="o">((</span> i +<span class="o">=</span> 1 <span class="o">))</span>
<span class="k">done</span>
</code></pre></div></div>

<h3 id="read-user-input">Read user input</h3>

<p><code class="language-plaintext highlighter-rouge">read foo</code>, with a message <code class="language-plaintext highlighter-rouge">read -p "Enter your name" foo</code>.</p>

<h3 id="read-file">Read file</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">LINE</span><span class="o">=</span>1

<span class="k">while </span><span class="nb">read</span> <span class="nt">-r</span> CURRENT_LINE
<span class="k">do
    </span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$LINE</span><span class="s2">: </span><span class="nv">$CURRENT_LINE</span><span class="s2">"</span>
    <span class="o">((</span>LINE++<span class="o">))</span>
<span class="k">done</span> &lt; <span class="s2">"my_file.txt"</span>
</code></pre></div></div>

<h3 id="execute-commands">Execute commands</h3>

<p><code class="language-plaintext highlighter-rouge">||</code> <strong>or</strong> operator / <code class="language-plaintext highlighter-rouge">&amp;&amp;</code> <strong>and</strong> operator, can be used to conditionally execute commands based on exit codes.</p>

<p><code class="language-plaintext highlighter-rouge">;</code>, commands can be separated in the same line with <code class="language-plaintext highlighter-rouge">;</code>.</p>

<h4 id="get-the-output-of-a-command">Get the output of a command</h4>

<p><code class="language-plaintext highlighter-rouge">$(CMD)</code>, 
<code class="language-plaintext highlighter-rouge">&lt;(CMD)</code>,
<code class="language-plaintext highlighter-rouge">var=`CMD`</code></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"Now is </span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">"</span>

diff &lt;<span class="o">(</span>foo<span class="o">)</span> &lt;<span class="o">(</span>bar<span class="o">)</span>

<span class="nv">var</span><span class="o">=</span><span class="sb">`</span><span class="nb">ls</span> <span class="nt">-a</span> | <span class="nb">grep </span>foo<span class="sb">`</span>
<span class="nb">echo</span> <span class="nv">$var</span>
</code></pre></div></div>

<h3 id="run-with-arguments">Run with arguments</h3>

<p>Run with <code class="language-plaintext highlighter-rouge">./example.sh arg1 arg2</code></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>i <span class="k">in</span> <span class="nv">$@</span>
<span class="k">do
    </span><span class="nb">echo</span> <span class="s2">"Entered arg is </span><span class="nv">$i</span><span class="s2">"</span>
<span class="k">done</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>Syntax</th>
      <th>Meaning</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">$0</code></td>
      <td>Name of the script</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">$1</code> to <code class="language-plaintext highlighter-rouge">$9</code></td>
      <td>Arguments of the script, <code class="language-plaintext highlighter-rouge">$1</code> is the first argument etc.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">$@</code></td>
      <td>All the arguments</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">$#</code></td>
      <td>Number of arguments</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">$?</code></td>
      <td>Return code of the previous command</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">$$</code></td>
      <td>Process identification number (PID) for the current script</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">!!</code></td>
      <td>Entire last command</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">$_</code></td>
      <td>Last argument from the last command</td>
    </tr>
  </tbody>
</table>

<h3 id="automate-scripts-via-cron-jobs">Automate scripts via cron jobs</h3>

<p><code class="language-plaintext highlighter-rouge">* * * * *</code>, represents <code class="language-plaintext highlighter-rouge">minute/hour/day/month/weekday</code></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># cron job</span>
<span class="k">*</span> <span class="k">*</span> <span class="k">*</span> <span class="k">*</span> <span class="k">*</span> sh /path/to/example.sh
</code></pre></div></div>]]></content><author><name>Guibin</name></author><category term="Basics" /><category term="Shell" /><category term="Bash" /><summary type="html"><![CDATA[Create a Bash Script]]></summary></entry><entry><title type="html">Regular Expression (Regex)</title><link href="/frideg/basics/2022/11/19/regex.html" rel="alternate" type="text/html" title="Regular Expression (Regex)" /><published>2022-11-19T00:00:00+00:00</published><updated>2022-11-19T00:00:00+00:00</updated><id>/frideg/basics/2022/11/19/regex</id><content type="html" xml:base="/frideg/basics/2022/11/19/regex.html"><![CDATA[<h2 id="basic">Basic</h2>

<h3 id="anchors">Anchors</h3>

<p><code class="language-plaintext highlighter-rouge">^abc</code>, start with <strong>abc</strong></p>

<p><code class="language-plaintext highlighter-rouge">abc$</code>, end with <strong>abc</strong></p>

<p><code class="language-plaintext highlighter-rouge">^abc$</code>, exact match <strong>abc</strong></p>

<h3 id="quantifiers">Quantifiers</h3>

<p><code class="language-plaintext highlighter-rouge">c*</code>, zero or more <strong>c</strong></p>

<p><code class="language-plaintext highlighter-rouge">(ab)*</code>, zero or more <strong>ab</strong> and capture it</p>

<p><code class="language-plaintext highlighter-rouge">c+</code>, one or more <strong>c</strong></p>

<p><code class="language-plaintext highlighter-rouge">c?</code>, zero or one <strong>c</strong></p>

<p><code class="language-plaintext highlighter-rouge">c{2}</code>, 2 <strong>c</strong></p>

<p><code class="language-plaintext highlighter-rouge">c{2,}</code>, 2 or more <strong>c</strong></p>

<p><code class="language-plaintext highlighter-rouge">c{2, 4}</code>, 2 to 4 <strong>c</strong></p>

<h3 id="or-operator">OR operator</h3>

<p><code class="language-plaintext highlighter-rouge">(a|b)</code>, <strong>a</strong> or <strong>b</strong>, and capture it</p>

<p><code class="language-plaintext highlighter-rouge">[ab]</code>, <strong>a</strong> or <strong>b</strong>, without capturing it</p>

<h3 id="characters">Characters</h3>

<p><code class="language-plaintext highlighter-rouge">\d</code>, a digit char</p>

<p><code class="language-plaintext highlighter-rouge">\w</code>, a word char, alphanumeric + underscore</p>

<p><code class="language-plaintext highlighter-rouge">\s</code>, a whiter space char</p>

<p><code class="language-plaintext highlighter-rouge">.</code>, any chars</p>

<p><code class="language-plaintext highlighter-rouge">\D</code>, <code class="language-plaintext highlighter-rouge">\W</code>, <code class="language-plaintext highlighter-rouge">\S</code>, inverse match respectively</p>

<p><code class="language-plaintext highlighter-rouge">\</code>, escape chars <code class="language-plaintext highlighter-rouge">^.[$()|*+?{\</code></p>

<h3 id="flags">Flags</h3>

<p><code class="language-plaintext highlighter-rouge">g</code>, global</p>

<p><code class="language-plaintext highlighter-rouge">m</code>, multi-line</p>

<p><code class="language-plaintext highlighter-rouge">i</code>, case-insensitive</p>

<h2 id="intermediate">Intermediate</h2>

<h3 id="grouping-and-capturing">Grouping and Capturing</h3>

<p><code class="language-plaintext highlighter-rouge">(ab)</code>, a capturing group <strong>ab</strong></p>

<p><code class="language-plaintext highlighter-rouge">(?:ab)</code>, disable the capturing group</p>

<p><code class="language-plaintext highlighter-rouge">(?&lt;foo&gt;bc)</code>, name the capturing group <strong>foo</strong></p>

<h3 id="bracket">Bracket</h3>

<p><code class="language-plaintext highlighter-rouge">[a-z]</code>, a lower case letter</p>

<p><code class="language-plaintext highlighter-rouge">[0-9]</code>, a single decimal digit number</p>

<p><code class="language-plaintext highlighter-rouge">[a-fA-F0-9]</code>, a single hexadecimal digit, case insensitive</p>

<p><code class="language-plaintext highlighter-rouge">[^a-zA-Z]</code>, not a letter, <code class="language-plaintext highlighter-rouge">^</code> is negation inside <code class="language-plaintext highlighter-rouge">[]</code></p>

<h3 id="greedy-and-lazy-match">Greedy and Lazy Match</h3>

<p><code class="language-plaintext highlighter-rouge">*</code>, <code class="language-plaintext highlighter-rouge">+</code>, <code class="language-plaintext highlighter-rouge">{}</code>, greedy operators</p>

<p><code class="language-plaintext highlighter-rouge">?</code>, can be used to make it lazy</p>

<h2 id="advance">Advance</h2>

<h3 id="boundary">Boundary</h3>

<p><code class="language-plaintext highlighter-rouge">\babc</code>, <strong>abc</strong> begin on a word boundary</p>

<p><code class="language-plaintext highlighter-rouge">abc\b</code>, <strong>abc</strong> end on a word boundary</p>

<p><code class="language-plaintext highlighter-rouge">\babc\b</code>, exact word <strong>abc</strong></p>

<p><code class="language-plaintext highlighter-rouge">\Babc</code>, <strong>abc</strong> not begin on a word boundary</p>

<p><code class="language-plaintext highlighter-rouge">abc\B</code>, <strong>abc</strong> not end on a word boundary</p>

<p><code class="language-plaintext highlighter-rouge">\Babc\B</code>, <strong>abc</strong> not begin and end on a word boundary</p>

<h3 id="back-references">Back-references</h3>

<p><code class="language-plaintext highlighter-rouge">([abc])([def])\2\1</code>, <code class="language-plaintext highlighter-rouge">\1</code> or <code class="language-plaintext highlighter-rouge">\2</code> matches the first or second captured group</p>

<p><code class="language-plaintext highlighter-rouge">(?&lt;foo&gt;[abc])\k&lt;foo&gt;</code>, <code class="language-plaintext highlighter-rouge">\k&lt;foo&gt;</code> match the captured group named <strong>foo</strong></p>

<h3 id="look-ahead-and-look-behind">Look-ahead and Look-behind</h3>

<p><code class="language-plaintext highlighter-rouge">a(?=b)</code>, <strong>a</strong> that is followed by <strong>b</strong></p>

<p><code class="language-plaintext highlighter-rouge">(?&lt;=b)a</code>, <strong>a</strong> that is preceded by <strong>b</strong></p>

<p><code class="language-plaintext highlighter-rouge">a(?!b)</code>, <strong>a</strong> that is not followed by <strong>b</strong></p>

<p><code class="language-plaintext highlighter-rouge">(?!b)a</code>, <strong>a</strong> that is not preceded by <strong>b</strong></p>]]></content><author><name>Guibin</name></author><category term="Basics" /><category term="Regex" /><summary type="html"><![CDATA[Basic]]></summary></entry><entry><title type="html">Markdown Quick Reference</title><link href="/frideg/basics/2022/11/18/markdown.html" rel="alternate" type="text/html" title="Markdown Quick Reference" /><published>2022-11-18T00:00:00+00:00</published><updated>2022-11-18T00:00:00+00:00</updated><id>/frideg/basics/2022/11/18/markdown</id><content type="html" xml:base="/frideg/basics/2022/11/18/markdown.html"><![CDATA[<h2 id="basic-syntax">Basic Syntax</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Element</th>
      <th style="text-align: left">Syntax</th>
      <th style="text-align: left">: Rendered :</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Heading</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge"># H1</code></td>
      <td style="text-align: left">\</td>
    </tr>
    <tr>
      <td style="text-align: left"> </td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">## H2</code></td>
      <td style="text-align: left">\</td>
    </tr>
    <tr>
      <td style="text-align: left"> </td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">### H3</code></td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">Bold</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">**bold text**</code></td>
      <td style="text-align: left">: **bold text** :</td>
    </tr>
    <tr>
      <td style="text-align: left">Italic</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">*italic text*</code></td>
      <td style="text-align: left">: *italic text* :</td>
    </tr>
    <tr>
      <td style="text-align: left">Ordered List</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">1. First item</code></td>
      <td style="text-align: left">1. First item  \</td>
    </tr>
    <tr>
      <td style="text-align: left"> </td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">2. Second item</code></td>
      <td style="text-align: left">2. Second item \</td>
    </tr>
    <tr>
      <td style="text-align: left"> </td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">3. Third item</code></td>
      <td style="text-align: left">3. Third item</td>
    </tr>
    <tr>
      <td style="text-align: left">Unordered List</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">- First item</code></td>
      <td style="text-align: left">- First item  \</td>
    </tr>
    <tr>
      <td style="text-align: left"> </td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">- Second item</code></td>
      <td style="text-align: left">- Second item \</td>
    </tr>
    <tr>
      <td style="text-align: left"> </td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">- Third item</code></td>
      <td style="text-align: left">- Third item</td>
    </tr>
    <tr>
      <td style="text-align: left">Code</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">`code`</code></td>
      <td style="text-align: left">: <code class="language-plaintext highlighter-rouge">code</code> :</td>
    </tr>
    <tr>
      <td style="text-align: left">Link</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">[Home](https://blog.frideg.com)</code></td>
      <td style="text-align: left">: [Home](https://blog.frideg.com) :</td>
    </tr>
    <tr>
      <td style="text-align: left">Image</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">![alt text](/assets/images/favicon-16x16.png)</code></td>
      <td style="text-align: left">: ![favicon](/assets/images/favicon-16x16.png) :</td>
    </tr>
  </tbody>
</table>

<h2 id="extended-syntax">Extended Syntax</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Element</th>
      <th style="text-align: left">Syntax</th>
      <th style="text-align: left">: Rendered :</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Code Block</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">```</code></td>
      <td style="text-align: left">```       \</td>
    </tr>
    <tr>
      <td style="text-align: left"> </td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">some code</code></td>
      <td style="text-align: left">some code \</td>
    </tr>
    <tr>
      <td style="text-align: left"> </td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">```</code></td>
      <td style="text-align: left">```</td>
    </tr>
    <tr>
      <td style="text-align: left">Task List</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">- [x] checked item</code></td>
      <td style="text-align: left">- [x] checked item   \</td>
    </tr>
    <tr>
      <td style="text-align: left"> </td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">- [ ] unchecked item</code></td>
      <td style="text-align: left">- [ ] unchecked item</td>
    </tr>
    <tr>
      <td style="text-align: left">Strike through</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">~~Strike through text~~</code></td>
      <td style="text-align: left">: <del>Strike through text</del> :</td>
    </tr>
    <tr>
      <td style="text-align: left">Highlight</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">==Highlighted test==</code></td>
      <td style="text-align: left">: ==Highlighted test== :</td>
    </tr>
    <tr>
      <td style="text-align: left">Subscript</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">H~2~O</code></td>
      <td style="text-align: left">: H~2~O :</td>
    </tr>
    <tr>
      <td style="text-align: left">Superscript</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">x^2^</code></td>
      <td style="text-align: left">: x^2^ :</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Guibin</name></author><category term="Basics" /><category term="Markdown" /><summary type="html"><![CDATA[Basic Syntax]]></summary></entry><entry><title type="html">Basic Linux Command</title><link href="/frideg/basics/2022/11/05/linux-commands.html" rel="alternate" type="text/html" title="Basic Linux Command" /><published>2022-11-05T00:00:00+00:00</published><updated>2022-11-05T00:00:00+00:00</updated><id>/frideg/basics/2022/11/05/linux-commands</id><content type="html" xml:base="/frideg/basics/2022/11/05/linux-commands.html"><![CDATA[<h2 id="file-and-navigating">File and Navigating</h2>
<p><code class="language-plaintext highlighter-rouge">ls</code>, list, print the contents of the current directory</p>

<p><code class="language-plaintext highlighter-rouge">.</code>, current directory</p>

<p><code class="language-plaintext highlighter-rouge">..</code>, parent directory</p>

<p><code class="language-plaintext highlighter-rouge">~</code>, home directory</p>

<p><code class="language-plaintext highlighter-rouge">-</code>, previous directory</p>

<p><code class="language-plaintext highlighter-rouge">/</code>, root</p>

<p><code class="language-plaintext highlighter-rouge">cd</code>, change directory</p>

<p><code class="language-plaintext highlighter-rouge">pwd</code>, print working directory</p>

<p><code class="language-plaintext highlighter-rouge">mkdir</code>, make directory</p>

<p><code class="language-plaintext highlighter-rouge">rm</code>, remove file</p>

<p><code class="language-plaintext highlighter-rouge">rmdir</code>, remove directory</p>

<p><code class="language-plaintext highlighter-rouge">cp</code>, copy</p>

<p><code class="language-plaintext highlighter-rouge">mv</code>, move or rename</p>

<p><code class="language-plaintext highlighter-rouge">touch</code>, update access date of a file or directory, if not existing, create one</p>

<h2 id="read">Read</h2>
<p><code class="language-plaintext highlighter-rouge">echo</code>, print out</p>

<p><code class="language-plaintext highlighter-rouge">cat</code>, concatenate, read file and write to stdout</p>

<p><code class="language-plaintext highlighter-rouge">more</code> or <code class="language-plaintext highlighter-rouge">less</code>, view file screen by screen</p>

<p><code class="language-plaintext highlighter-rouge">grep</code>, global regular expression print, for searching</p>

<p><code class="language-plaintext highlighter-rouge">diff</code>, show difference, <code class="language-plaintext highlighter-rouge">diff fileA fileB</code></p>

<p><code class="language-plaintext highlighter-rouge">find</code>, find files, eg. <code class="language-plaintext highlighter-rouge">find . -name '*.jpg' -exec mv {} ./jpg \;</code></p>

<h2 id="process">Process</h2>
<p><code class="language-plaintext highlighter-rouge">ps</code>, process status, <code class="language-plaintext highlighter-rouge">aux</code> for all</p>

<p><code class="language-plaintext highlighter-rouge">jobs</code>, status of jobs</p>

<p><code class="language-plaintext highlighter-rouge">fg</code> / <code class="language-plaintext highlighter-rouge">bg</code>, foreground / background a process, <code class="language-plaintext highlighter-rouge">%</code> with job number</p>

<p><code class="language-plaintext highlighter-rouge">&amp;</code>, suffix to run in background</p>

<p><code class="language-plaintext highlighter-rouge">ctrl-c</code>, SIGINT, stop process</p>

<p><code class="language-plaintext highlighter-rouge">ctrl-\</code>, SIGQUIT, quit process</p>

<p><code class="language-plaintext highlighter-rouge">kill -TERM &lt;PID&gt;</code>, SIGTERM, exit gracefully</p>

<p><code class="language-plaintext highlighter-rouge">ctrl-z</code>, SIGTSTP, pause process</p>

<h2 id="redirection">Redirection</h2>
<p><code class="language-plaintext highlighter-rouge">|</code>, pipe output to input</p>

<p><code class="language-plaintext highlighter-rouge">&lt;</code>, redirect input</p>

<p><code class="language-plaintext highlighter-rouge">&gt;</code>, redirect output</p>

<p><code class="language-plaintext highlighter-rouge">&gt;&gt;</code>, redirect output and append</p>

<h2 id="programs">Programs</h2>
<p><code class="language-plaintext highlighter-rouge">sudo</code>, super user do</p>

<p><code class="language-plaintext highlighter-rouge">which</code>, find path for a program</p>

<p><code class="language-plaintext highlighter-rouge">date</code>, print date and time</p>

<p><code class="language-plaintext highlighter-rouge">tee</code>, read input and write to stdout and file</p>

<p><code class="language-plaintext highlighter-rouge">chmod</code>, change mode, permission</p>

<p><code class="language-plaintext highlighter-rouge">man</code>, manual</p>

<p><code class="language-plaintext highlighter-rouge">history</code>, shell history</p>

<h2 id="environment-variable">Environment Variable</h2>
<p><code class="language-plaintext highlighter-rouge">env</code> or <code class="language-plaintext highlighter-rouge">printenv</code>, print out environment variable</p>

<p><code class="language-plaintext highlighter-rouge">$PATH</code>, path for programs</p>

<p><code class="language-plaintext highlighter-rouge">$SHELL</code>, current shell</p>

<p><code class="language-plaintext highlighter-rouge">$HOME</code>, home directory</p>]]></content><author><name>Guibin</name></author><category term="Basics" /><category term="Command" /><category term="Shell" /><summary type="html"><![CDATA[File and Navigating ls, list, print the contents of the current directory]]></summary></entry><entry><title type="html">Shell Config and Alias</title><link href="/frideg/productivity/2022/10/23/shell-config.html" rel="alternate" type="text/html" title="Shell Config and Alias" /><published>2022-10-23T00:00:00+00:00</published><updated>2022-10-23T00:00:00+00:00</updated><id>/frideg/productivity/2022/10/23/shell-config</id><content type="html" xml:base="/frideg/productivity/2022/10/23/shell-config.html"><![CDATA[<h2 id="shell-config">Shell Config</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Enable vi mode
bindkey -v
</code></pre></div></div>

<h2 id="alias">Alias</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Git
alias ga='git add'
alias gb='git branch'
alias gc='git commit'
alias gd='git diff'
alias gl='git log --oneline'
alias gs='git status'

# Others
alias ll='ls -la'
</code></pre></div></div>]]></content><author><name>Guibin</name></author><category term="Productivity" /><category term="Shell" /><category term="Config" /><summary type="html"><![CDATA[Shell Config]]></summary></entry><entry><title type="html">How to Build a Blog Site</title><link href="/frideg/tutorials/2022/10/22/jekyll-blog.html" rel="alternate" type="text/html" title="How to Build a Blog Site" /><published>2022-10-22T00:00:00+00:00</published><updated>2022-10-22T00:00:00+00:00</updated><id>/frideg/tutorials/2022/10/22/jekyll-blog</id><content type="html" xml:base="/frideg/tutorials/2022/10/22/jekyll-blog.html"><![CDATA[<p>Instructions are based on ChromeOS Debian Linux</p>

<h2 id="install-jekyll">Install <a href="https://jekyllrb.com/docs/">Jekyll</a></h2>

<h3 id="install-ruby-and-other-prerequisites">Install Ruby and other prerequisites</h3>

<p><code class="language-plaintext highlighter-rouge">sudo apt install ruby-full build-essential zlib1g-dev</code></p>

<h3 id="add-environment-variables-to-configuration-file">Add environment variables to configuration file</h3>

<p>Add below to <code class="language-plaintext highlighter-rouge">~/.zshrc</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Install Ruby Gems to ~/gems
export GEM_HOME="$HOME/gems"
export PATH="$HOME/gems/bin:$PATH"
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">source ~/.zshrc</code> to apply</p>

<h3 id="install-jekyll-and-bundler">Install Jekyll and Bundler</h3>

<p><code class="language-plaintext highlighter-rouge">gem install jekyll bundler</code></p>

<h2 id="clone-a-jekyll-theme">Clone a <a href="https://jekyllrb.com/docs/themes/">Jekyll Theme</a></h2>

<p>Use a theme as a starting point, for example <a href="https://github.com/jeffreytse/jekyll-theme-yat">Yat Theme</a> which is what this blog site is built upon</p>

<p>Understand the basics about Jekyll site following this <a href="https://jekyllrb.com/docs/step-by-step/01-setup/">step by step tutorial</a></p>

<h2 id="build-jekyll-site-locally">Build Jekyll Site Locally</h2>

<h3 id="build-and-run">Build and run</h3>

<p>in the Jekyll site root directory, run</p>

<p><code class="language-plaintext highlighter-rouge">bundle install</code></p>

<p><code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code></p>

<h3 id="test-locally">Test locally</h3>

<p>browse to <a href="http://localhost:4000">localhost:4000</a></p>

<h2 id="customize-the-jekyll-theme">Customize the Jekyll Theme</h2>

<p>start from the <code class="language-plaintext highlighter-rouge">_config.yml</code>, then add markdown files to <code class="language-plaintext highlighter-rouge">_posts</code></p>]]></content><author><name>Guibin</name></author><category term="Tutorials" /><category term="Jekyll" /><category term="Blog" /><summary type="html"><![CDATA[Instructions are based on ChromeOS Debian Linux]]></summary></entry><entry><title type="html">Vim Setup and Basics</title><link href="/frideg/basics/2022/10/19/vim.html" rel="alternate" type="text/html" title="Vim Setup and Basics" /><published>2022-10-19T00:00:00+00:00</published><updated>2022-10-19T00:00:00+00:00</updated><id>/frideg/basics/2022/10/19/vim</id><content type="html" xml:base="/frideg/basics/2022/10/19/vim.html"><![CDATA[<p>Most contents of this post are from the <a href="https://missing.csail.mit.edu/2020/editors/">reference here</a></p>

<h2 id="vim-config">Vim Config</h2>

<p>Save the config to <code class="language-plaintext highlighter-rouge">~/.vimrc</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>" Enable Vim functionality instead of 100% Vi compatibility
set nocompatible

" Turn of syntax highlighting
syntax on

" Highlight matching bracket
set showmatch

" Show line number
set number

" Enable relative line numbering mode
set relativenumber

" More powerful and intuitive backspacing
set backspace=indent,eol,start

" Set smart case sensitivity when searching
set ignorecase
set smartcase

" Enable searching while typing
set incsearch

" Always show the status line at the bottom
set laststatus=2
</code></pre></div></div>

<h2 id="vim-basics">Vim Basics</h2>

<h3 id="mode">Mode</h3>
<ul>
  <li>Normal: <code class="language-plaintext highlighter-rouge">&lt;ESC&gt;</code></li>
  <li>Insert: <code class="language-plaintext highlighter-rouge">i</code></li>
  <li>Replace: <code class="language-plaintext highlighter-rouge">r</code></li>
  <li>Visual: <code class="language-plaintext highlighter-rouge">v</code>, line <code class="language-plaintext highlighter-rouge">V</code>, block <code class="language-plaintext highlighter-rouge">Ctrl-v</code></li>
  <li>Command-line: <code class="language-plaintext highlighter-rouge">&lt;ESC&gt;</code> -&gt; <code class="language-plaintext highlighter-rouge">:</code></li>
</ul>

<h3 id="command-line">Command-line</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">:q</code> quit</li>
  <li><code class="language-plaintext highlighter-rouge">:w</code> save</li>
  <li><code class="language-plaintext highlighter-rouge">:wq</code> save and quit</li>
</ul>

<h3 id="movement">Movement</h3>
<ul>
  <li>Basic movement: <code class="language-plaintext highlighter-rouge">hjkl</code> (left, down, up, right)</li>
  <li>Words: <code class="language-plaintext highlighter-rouge">w</code> (next word),<code class="language-plaintext highlighter-rouge">b</code> (beginning of word), <code class="language-plaintext highlighter-rouge">e</code> (end of word)</li>
  <li>Lines: <code class="language-plaintext highlighter-rouge">0</code> (beginning of line), <code class="language-plaintext highlighter-rouge">^</code> (first non-blank character), <code class="language-plaintext highlighter-rouge">$</code> (end of line)</li>
  <li>Screen: <code class="language-plaintext highlighter-rouge">H</code> (top of screen), <code class="language-plaintext highlighter-rouge">M</code> (middle of screen), <code class="language-plaintext highlighter-rouge">L</code> (bottom of screen)</li>
  <li>Scroll: <code class="language-plaintext highlighter-rouge">Ctrl-u </code>(up), <code class="language-plaintext highlighter-rouge">Ctrl-d</code> (down)</li>
  <li>File: <code class="language-plaintext highlighter-rouge">gg</code> (beginning of file), <code class="language-plaintext highlighter-rouge">G</code> (end of file)</li>
  <li>Line numbers: <code class="language-plaintext highlighter-rouge">:{number}&lt;ENTER&gt;</code> or <code class="language-plaintext highlighter-rouge">{number}G</code> (line {number})</li>
  <li>Misc: <code class="language-plaintext highlighter-rouge">%</code> (corresponding item)</li>
  <li>Find: <code class="language-plaintext highlighter-rouge">f{character}</code>, <code class="language-plaintext highlighter-rouge">t{character}</code>, <code class="language-plaintext highlighter-rouge">F{character}</code>, <code class="language-plaintext highlighter-rouge">T{character}</code>
  find/to forward/backward <code class="language-plaintext highlighter-rouge">{character}</code> on the current line, <code class="language-plaintext highlighter-rouge">,</code> / <code class="language-plaintext highlighter-rouge">;</code> for navigating matches</li>
  <li>Search: <code class="language-plaintext highlighter-rouge">/{regex}</code>, <code class="language-plaintext highlighter-rouge">n</code> / <code class="language-plaintext highlighter-rouge">N</code> for navigating matches</li>
</ul>

<h3 id="edit">Edit</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">i</code> insert</li>
  <li><code class="language-plaintext highlighter-rouge">a</code> append</li>
  <li><code class="language-plaintext highlighter-rouge">o</code> / <code class="language-plaintext highlighter-rouge">O</code> open line below / above</li>
  <li><code class="language-plaintext highlighter-rouge">d{motion}</code> delete</li>
  <li><code class="language-plaintext highlighter-rouge">c{motion}</code> change</li>
  <li><code class="language-plaintext highlighter-rouge">x</code> delete character</li>
  <li><code class="language-plaintext highlighter-rouge">s</code> substitute character</li>
  <li><code class="language-plaintext highlighter-rouge">u</code> undo, <code class="language-plaintext highlighter-rouge">Ctrl-r</code> redo</li>
  <li><code class="language-plaintext highlighter-rouge">y</code> copy, <code class="language-plaintext highlighter-rouge">p</code> paste</li>
  <li><code class="language-plaintext highlighter-rouge">~</code> flip case</li>
</ul>

<h3 id="count">Count</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">3w</code> move 3 words forward</li>
  <li><code class="language-plaintext highlighter-rouge">5j</code> move 5 lines down</li>
  <li><code class="language-plaintext highlighter-rouge">7dw</code> delete 7 words</li>
</ul>

<h3 id="modifier">Modifier</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ci(</code> change inside <code class="language-plaintext highlighter-rouge">()</code></li>
  <li><code class="language-plaintext highlighter-rouge">ca[</code> change around <code class="language-plaintext highlighter-rouge">[]</code></li>
  <li><code class="language-plaintext highlighter-rouge">di'</code> delete inside <code class="language-plaintext highlighter-rouge">''</code></li>
</ul>]]></content><author><name>Guibin</name></author><category term="Basics" /><category term="Vim" /><category term="Config" /><summary type="html"><![CDATA[Most contents of this post are from the reference here]]></summary></entry><entry><title type="html">Zsh Terminal Autocompletion</title><link href="/frideg/productivity/2022/10/17/zsh.html" rel="alternate" type="text/html" title="Zsh Terminal Autocompletion" /><published>2022-10-17T00:00:00+00:00</published><updated>2022-10-17T00:00:00+00:00</updated><id>/frideg/productivity/2022/10/17/zsh</id><content type="html" xml:base="/frideg/productivity/2022/10/17/zsh.html"><![CDATA[<h2 id="install-zsh">Install Zsh</h2>
<p>for Debian based distro</p>

<p><code class="language-plaintext highlighter-rouge">sudo apt install zsh</code></p>

<p>set Zsh as the default shell</p>

<p><code class="language-plaintext highlighter-rouge">sudo chsh -s $(which zsh) ${USER}</code></p>

<h2 id="install-zsh-z-plugin">Install <a href="https://github.com/agkozak/zsh-z">Zsh-z</a> Plugin</h2>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> ~/.zsh/plugins/zsh-z

curl https://raw.githubusercontent.com/agkozak/zsh-z/master/zsh-z.plugin.zsh <span class="se">\</span>
<span class="nt">-o</span> ~/.zsh/plugins/zsh-z/zsh-z.plugin.sh
</code></pre></div></div>

<p>add <code class="language-plaintext highlighter-rouge">source ~/.zsh/plugins/zsh-z/zsh-z.plugin.sh</code> to <code class="language-plaintext highlighter-rouge">~/.zshrc</code></p>

<h2 id="zsh-config">Zsh Config</h2>
<p>save in <code class="language-plaintext highlighter-rouge">~/.zshrc</code>, use <code class="language-plaintext highlighter-rouge">source ~/.zshrc</code> to apply</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># AUTOCOMPLETION

# initialize autocompletion
autoload -Uz compinit &amp;&amp; compinit

# history setup
setopt APPEND_HISTORY
setopt SHARE_HISTORY
setopt EXTENDED_HISTORY
setopt HIST_EXPIRE_DUPS_FIRST
HISTFILE=$HOME/.zhistory
SAVEHIST=1000
HISTSIZE=999

# autocompletion using arrow keys
bindkey '^[OA' history-beginning-search-backward
bindkey '^[OB' history-beginning-search-forward

# PLUGINS

source ~/.zsh/plugins/zsh-z/zsh-z.plugin.sh

# Zsh-z plugin options
ZSH_CASE=smart # lower case patterns are treated as case insensitive
zstyle ':completion:*' menu select # improve completion menu style

# USER PROMPT
   
# enable command-subsitution in PS1
setopt PROMPT_SUBST
NL=$'\n'
PS1='$NL%B%F{cyan}%3~%f%b$NL%B%(?.%F{green}.%F{red})%(!.#.$)%f%b' 
</code></pre></div></div>

<h2 id="autocompletion">Autocompletion</h2>
<p>check <code class="language-plaintext highlighter-rouge">man zshcomsys</code> for compinit</p>

<p>check <code class="language-plaintext highlighter-rouge">man zshoptions</code> and <code class="language-plaintext highlighter-rouge">man zshparam</code> for history setup</p>

<p>check <code class="language-plaintext highlighter-rouge">man zshzle</code> for bindkey, <code class="language-plaintext highlighter-rouge">ctrl + v</code> in terminal to find arrow keys’ code, e.g. <code class="language-plaintext highlighter-rouge">^[OA</code> is up arrow and <code class="language-plaintext highlighter-rouge">^[OB</code> is down arrow in wsl2 Ubuntu and ChromeOS Debian; for Mac, it is <code class="language-plaintext highlighter-rouge">^[[A</code> and <code class="language-plaintext highlighter-rouge">^[[B</code></p>

<h2 id="user-prompt">User Prompt</h2>
<p>check <code class="language-plaintext highlighter-rouge">man zshmics</code> for prompt</p>

<h3 id="ps1-code">PS1 code</h3>
<p><code class="language-plaintext highlighter-rouge">%B (%b)</code>, boldface</p>

<p><code class="language-plaintext highlighter-rouge">%F (%f)</code>, foreground color</p>

<p><code class="language-plaintext highlighter-rouge">%3~</code>, current working directory, showing trailing <code class="language-plaintext highlighter-rouge">3</code>, replacing <code class="language-plaintext highlighter-rouge">$HOME</code> with <code class="language-plaintext highlighter-rouge">~</code>; <code class="language-plaintext highlighter-rouge">0</code> will show absolute path</p>

<p><code class="language-plaintext highlighter-rouge">$NL</code>, new line, using variable <code class="language-plaintext highlighter-rouge">NL=$'\n'</code></p>

<p><code class="language-plaintext highlighter-rouge">%(?.%F{green}.%F{red})</code>, green if last command is success, red if error</p>

<p><code class="language-plaintext highlighter-rouge">%(!.#.$)</code>, <code class="language-plaintext highlighter-rouge">#</code> if privilege, <code class="language-plaintext highlighter-rouge">$</code> is non-privilege</p>]]></content><author><name>Guibin</name></author><category term="Productivity" /><category term="Terminal" /><category term="Zsh" /><category term="Shell" /><category term="Config" /><summary type="html"><![CDATA[Install Zsh for Debian based distro]]></summary></entry></feed>